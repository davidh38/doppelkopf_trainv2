* Client/Server Communication Specification

** Overview
Defines the communication patterns and data flow between WebSocket client and server adapters.

** Connection Lifecycle

*** Connection Establishment
**** Client Side
- Initialize connection with server URL and port
- Handle connection success/failure
- Start message handler loop
- Begin heartbeat mechanism

**** Server Side
- Listen for incoming connections
- Validate connection requests
- Store client connection state
- Initialize client message handler

*** Active Connection
**** Heartbeat Protocol
- Client sends ping every 30 seconds
- Server responds with pong
- Connection marked stale after 2 missed heartbeats

**** Message Flow
- All messages are JSON formatted
- Base message structure: {type: string, payload: dict, timestamp: number}
- Messages are processed asynchronously
- Order guaranteed within single message type

*** Connection Termination
**** Graceful Shutdown
- Client sends disconnect message
- Server acknowledges and closes connection
- Resources cleaned up on both ends

**** Error Handling
- Connection loss detection
- Automatic reconnection attempts
- Resource cleanup
- Error logging

** Message Types

*** System Messages
**** Heartbeat
- ping: {} -> {type: "pong"}
- connection_status: {status: "connected"|"disconnected"}

*** Game Messages
All game-related messages follow network_specification.org format

** Error Handling

*** Client Side
**** Connection Errors
- Server unreachable
- Connection timeout
- Authentication failure

**** Message Errors
- Invalid message format
- Message timeout
- Server rejection

*** Server Side
**** Client Errors
- Invalid message format
- Rate limiting violations
- Authentication failures

**** System Errors
- Resource exhaustion
- Internal errors
- Database connection issues

** Implementation Notes

*** Client Adapter
**** Public Functions
- connect(url: str) -> dict
- disconnect(connection: dict) -> None
- send_message(connection: dict, msg_type: str, payload: dict) -> None
- start_message_handler(connection: dict, message_handlers: dict) -> None

*** Server Adapter
**** Public Functions
- create_server(port: int) -> dict
- start_server(server: dict) -> None
- stop_server(server: dict) -> None
- broadcast_message(server: dict, msg_type: str, payload: dict) -> None

** Testing Strategy
*** Unit Tests
- Connection management
- Message formatting
- Error handling
- State management

*** Integration Tests
- Full connection lifecycle
- Message flow
- Error recovery
- Load testing

** Dependencies
- Python 3.8+
- websockets library
- JSON for message serialization

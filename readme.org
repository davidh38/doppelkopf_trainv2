* Doppelkopf Train v2

* Project Overview
This is a modern implementation of the classic German card game Doppelkopf, focusing on:
- Data-driven design and functional programming approach
- Clean architecture with clear boundaries
- Comprehensive testing and state management
- Both terminal and web-based user interfaces

The project aims to provide an accessible, well-documented platform for playing Doppelkopf while serving as an example of clean software design principles.

* Key Features
- Data-centric architecture with state logging
- Functional programming approach
- Comprehensive test coverage with reproducible game states
- Clean separation between UI and game logic
- Socket.IO integration for real-time gameplay
- Multiple interface options (terminal, web)
- Extensive documentation and specifications

* Technology Stack
- Backend: Python, Flask
- Frontend: JavaScript, Socket.IO
- Testing: Python unittest framework
- Documentation: Org-mode

* Architecture
** Design Principles
- Data-first approach: Game state is the single source of truth
- Clean boundaries: Clear separation between components
- Functional design: Minimize side effects, maximize testability
- Documentation-driven development: Specifications guide implementation
- Test-driven development: Comprehensive test coverage

** Components
- Backend core (game logic, state management)
- Frontend interfaces (terminal, web)
- State logging and replay system
- Testing framework

** System Architecture
#+BEGIN_SRC mermaid
graph TB
    subgraph Server
        CoreLogic[Core Logic]
        ServerAdapter[Server Socket Adapter]
        CoreLogic --- ServerAdapter
    end
    
    subgraph Client
        ServerAdapter --- ClientAdapter[Client Socket Adapter]
        ClientAdapter --- TerminalUI[Terminal UI]
        ClientAdapter --- BrowserUI[Browser UI]
    end

    style Server fill:#f9f,stroke:#333,stroke-width:4px
    style Client fill:#bbf,stroke:#333,stroke-width:4px
    style CoreLogic fill:#fff,stroke:#333,stroke-width:2px,font-size:18px,color:#000
    style ServerAdapter fill:#fff,stroke:#333,stroke-width:2px,font-size:18px,color:#000
    style ClientAdapter fill:#fff,stroke:#333,stroke-width:2px,font-size:18px,color:#000
    style TerminalUI fill:#fff,stroke:#333,stroke-width:2px,font-size:18px,color:#000
    style BrowserUI fill:#fff,stroke:#333,stroke-width:2px,font-size:18px,color:#000
#+END_SRC

* Documentation
** Specifications
- [[frontend_specification.org][Frontend Specification]]: UI implementation details
- [[network_specification.org][Network Specification]]: WebSocket protocol and data structures
- [[gameplay_specification.org][Gameplay Specification]]: Game mechanics and rules
- [[lobby_and_table_creation_specification.org][Lobby and Table Creation]]: Server initialization and table management
- [[table_creation_specification.org][Table Creation]]: Detailed table setup process
- [[data_structures.org][Data Structures]]: Core data structure definitions

* Implementation
** Backend Components
- src/backend/data_structures.py: Core data structure definitions
- src/backend/table_handler.py: Table management operations
- src/backend/game_handler.py: Game mechanics and state management
- src/backend/game_summary.py: Score calculation and game summary
- src/backend/game_logger.py: State logging and replay functionality

** Frontend Components
- Terminal interface for direct gameplay
- Web interface with Socket.IO for real-time updates
- Three main views:
  1. Lobby (game joining and creation)
  2. Gameplay interface
  3. Game summary view

* Testing
** Framework
- Comprehensive unit test suite
- Reproducible game state testing
- Random but legal card play simulation
- State snapshot testing

** Features
- Save and load game states
- Simulate partial games (e.g., play to specific trick)
- Replay functionality for analysis
- Test specific game scenarios

* Logging System
** Purpose
- Debug game mechanics
- Enable game replay and analysis
- Provide error recovery
- Support game state recreation

** Implementation
- JSON-formatted log files
- Per-game logging with timestamps
- Complete state capture after each action
- Minimal performance impact
- Stored in logs/ directory

* Getting Started
** Running the Program
1. Create and activate a virtual environment:
   #+BEGIN_SRC bash
   # Create virtual environment
   python3 -m venv venv
   #+END_SRC

   # Activate virtual environment:
   #+BEGIN_SRC bash
   source venv/bin/activate  # On macOS/Linux
   # or
   .\venv\Scripts\activate  # On Windows
   #+END_SRC

2. Install required packages:
   #+BEGIN_SRC bash
   # Core dependencies
   pip3 install frozendict flask python-socketio

   # For development/testing
   pip3 install pytest
   #+END_SRC

3. Run the program:
   #+BEGIN_SRC bash
   # Start the server (in one terminal):
   PYTHONPATH=$PWD python3 src/server.py

   # Start a client (in another terminal):
   PYTHONPATH=$PWD python3 src/client.py
   #+END_SRC

   The server will start both game and lobby services. The client provides a terminal interface for:
   - Setting your player name
   - Creating game tables
   - Joining existing tables
   - Playing the game

* Development Process
- Feature implementation via pull requests
- Specification updates with each feature
- Comprehensive testing requirements
- Code reuse from previous version where appropriate
- Clear documentation of design decisions
